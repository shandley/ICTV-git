[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ictv-git"
version = "1.0.0"
description = "Git-based viral taxonomy management system for ICTV data"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Scott Handley", email = ""},
]
maintainers = [
    {name = "Scott Handley", email = ""},
]
keywords = ["virology", "taxonomy", "ICTV", "git", "bioinformatics", "reproducible-research"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "pyyaml>=5.4.0",
    "gitpython>=3.1.0",
    "openpyxl>=3.0.0",
    "tqdm>=4.62.0",
    "click>=8.0.0",
    "requests>=2.26.0",
    "streamlit>=1.20.0",
    "fastapi>=0.95.0",
    "uvicorn>=0.20.0",
    "python-multipart>=0.0.5",
    "jinja2>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]

[project.scripts]
ictv-git = "src.cli:main"

[project.urls]
Homepage = "https://github.com/shandley/ICTV-git"
Documentation = "https://shandley.github.io/ICTV-git/"
Repository = "https://github.com/shandley/ICTV-git"
Issues = "https://github.com/shandley/ICTV-git/issues"
Changelog = "https://github.com/shandley/ICTV-git/blob/main/CHANGELOG.md"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | output
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=html --cov-report=term"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.setuptools]
packages = ["src", "src.parsers", "src.converters", "src.utils", "src.community_tools"]
package-dir = {"" = "."}

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

[tool.bandit]
exclude_dirs = ["tests", "venv"]
skips = ["B101"]  # Skip assert_used test